buildscript {
    repositories {
        mavenCentral()
    }
}
plugins {
    id "java-library"
    id "io.spring.dependency-management" version "1.1.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = "dev.craftplugins"
version = "1.0.0"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name "Jitpack"
        url "https://jitpack.io"
    }
    maven {
        name "Imanity"
        url "https://repo.imanity.dev/imanity-libraries"
    }
    maven {
        name "PaperMC"
        url "https://repo.papermc.io/repository/maven-public"
    }
}

dependencies {
    api("io.github.classgraph:classgraph:4.8.143")
    api("io.github.toolfactory:narcissus:1.0.7")
    api("javax.annotation:javax.annotation-api:1.3.2")
    api("io.fairyproject:bukkit-bundles:" + getProperty("fairy.version"))

    api("org.yaml:snakeyaml:2.0")
    api("com.google.code.gson:gson:2.8.9")
    api("javax.persistence:javax.persistence-api:2.2")
}

dependencies {
    // Spigot
    compileOnly("org.spigotmc:spigot-api:1.19.4-R0.1-SNAPSHOT")

    // Jabel
    annotationProcessor("com.github.bsideup.jabel:jabel-javac-plugin:0.4.2")
    compileOnly("com.github.bsideup.jabel:jabel-javac-plugin:0.4.2")
}

configure([tasks.compileJava]) {
    sourceCompatibility = 16 // for the IDE support
    options.release = 8
    options.encoding = "UTF-8"

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

shadowJar {
    relocate("io.fairyproject", "" + findProperty("plugin.package") + ".fairy")
    relocate("net.kyori", "" + findProperty("plugin.package") + ".fairy.libs.kyori")
    relocate("com.github.retrooper.packetevents", "" + findProperty("plugin.package") + ".fairy.libs.packetevents")
    relocate("org.yaml.snakeyaml", "" + findProperty("plugin.package") + ".snakeyaml")
    relocate("com.cryptomorin.xseries", "" + findProperty("plugin.package") + ".xseries")
    relocate("org.spongepowered.configurate", "" + findProperty("plugin.package") + ".libs.configurate")
    relocate("io.leangen.geantyref", "" + findProperty("plugin.package") + ".libs.geantyref")

    archiveFileName.set("CraftCore.jar")
}

build {
    dependsOn(shadowJar)
}

test {
    useJUnitPlatform()
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}